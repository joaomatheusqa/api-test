{
	"info": {
		"_postman_id": "3e067898-3180-495b-9215-4d60bd0514ed",
		"name": "Teste ServeRest Usuário",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28940536"
	},
	"item": [
		{
			"name": "Cenários positivos",
			"item": [
				{
					"name": "Listar usuários",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code  200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{local}}usuarios/",
							"host": [
								"{{local}}usuarios"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Criar usuário",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Utilando a API pública do faker para criar contas\r",
									"const fakerApiUrl = \"https://fakerapi.it/api/v1/persons?_locale=pt_BR&_seed=\" + Math.floor(Math.random() * 1000)\r",
									"\r",
									"// Requisição à API pública do Faker\r",
									"pm.sendRequest(fakerApiUrl, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(err)\r",
									"    } else {\r",
									"        // Criar informações a partir do retorno da API pública do faker\r",
									"        const person = res.json().data[0]\r",
									"        const emailAleatorio = person.email\r",
									"        const nomeAleatorio = person.firstname + ' ' + person.lastname\r",
									"        const senhaAleatoria = Math.random().toString(36).slice(-8)\r",
									"\r",
									"        // Salvar os valores em variáveis de ambiente\r",
									"        pm.globals.set('emailAleatorio', emailAleatorio)\r",
									"        pm.globals.set('nomeAleatorio', nomeAleatorio)\r",
									"        pm.globals.set('senhaAleatoria', senhaAleatoria)\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201)\r",
									"})\r",
									"\r",
									"pm.test(\"Mensagem de sucesso está presente\", function () {\r",
									"    var jsonData = pm.response.json()\r",
									"    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");\r",
									"})\r",
									"\r",
									"pm.test(\"Salvar _id em variável de ambiente\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    if (jsonData._id) {\r",
									"        pm.globals.set(\"_id\", jsonData._id);\r",
									"        console.log(\"O _id foi salvo na variável de ambiente '_id': \" + jsonData._id);\r",
									"    } else {\r",
									"        console.error(\"O campo _id não foi encontrado na resposta.\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{nomeAleatorio}}\",\r\n  \"email\": \"{{emailAleatorio}}\",\r\n  \"password\": \"{{senhaAleatoria}}\",\r\n  \"administrador\": \"true\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{local}}usuarios",
							"host": [
								"{{local}}usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar usuário por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code  200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Verificar se o id na resposta é o mesmo que o id utilizado na URL (conmparando com a variável)\r",
									"pm.test(\"Verifica se o _id da resposta é o mesmo utilizado na URL\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var requestedId = pm.globals.get(\"_id\");\r",
									"    pm.expect(jsonData._id).to.eql(requestedId);\r",
									"});\r",
									"\r",
									"// Verificar os outros campos de retorno\r",
									"pm.test(\"Verifica campos adicionais\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"nome\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"    pm.expect(jsonData).to.have.property(\"password\");\r",
									"    pm.expect(jsonData).to.have.property(\"administrador\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{local}}usuarios/{{_id}}",
							"host": [
								"{{local}}usuarios"
							],
							"path": [
								"{{_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar um usuário",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Utilando a API pública do faker para criar novas informações\r",
									"const fakerApiUrl = \"https://fakerapi.it/api/v1/persons?_locale=pt_BR&_seed=\" + Math.floor(Math.random() * 1000)\r",
									"\r",
									"// Requisição à API pública do Faker\r",
									"pm.sendRequest(fakerApiUrl, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(err)\r",
									"    } else {\r",
									"        // Criar informações a partir do retorno da API pública do faker\r",
									"        const person = res.json().data[0]\r",
									"        const emailAleatorio = person.email\r",
									"        const nomeAleatorio = person.firstname + ' ' + person.lastname\r",
									"        const senhaAleatoria = Math.random().toString(36).slice(-8)\r",
									"\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro alterado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{nomeAleatorio}}\",\r\n  \"email\": \"{{emailAleatorio}}\",\r\n  \"password\": \"{{senhaAleatoria}}\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{local}}usuarios/{{_id}}",
							"host": [
								"{{local}}usuarios"
							],
							"path": [
								"{{_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletar um usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{local}}usuarios/{{_id}}",
							"host": [
								"{{local}}usuarios"
							],
							"path": [
								"{{_id}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Aqui está um fluxo de testes analisando as possibilidades da API, para que o fluxo funcione no cenário perfeito e retorne sucesso nos testes a sequência deve ser:\n\n1. Listar usuários\n    \n2. Criar usuário\n    \n3. Buscar usuário por ID\n    \n4. Editar um usuário\n    \n5. Deletar um usuário"
		},
		{
			"name": "Cenários negativos",
			"item": [
				{
					"name": "Criar usuário",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function () {\r",
									"    pm.response.to.have.status(400)\r",
									"})\r",
									"\r",
									"pm.test(\"Mensagem de sucesso está presente\", function () {\r",
									"    var jsonData = pm.response.json()\r",
									"    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Fulano da Silva\",\r\n  \"email\": \"fulano@qa.com\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{local}}usuarios",
							"host": [
								"{{local}}usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar usuário por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Usuário não encontrado\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{local}}usuarios/0uxuPY0cbmQhpEz2",
							"host": [
								"{{local}}usuarios"
							],
							"path": [
								"0uxuPY0cbmQhpEz2"
							]
						}
					},
					"response": []
				}
			],
			"description": "Aqui está um fluxo de testes analisando as possibilidades da API, mas com o foco em retornos negativos deste. Para estes testes tenta-se criar um usuário com dados de um já existente e buscar por um usuário informando o ID incorreto."
		}
	]
}